#include<iostream>
using namespace std;

// question link:
// https://codeforces.com/problemset/problem/629/A

//logic:
//if there are k chocolates in a single row/column,
//then number of pairs is 'kC2' (as in permutations and combinations)
//kC2 = (k!) / (2 * (k-2)!)
//so, calculate answer for each row and column and add them up

//function to compute factorial 
int factorial(int n)
{
    return (n == 1 || n == 0) ? 1 : (n * factorial(n - 1));
}

int main()
{
    int n; // cake dimensions
    cin >> n;

    char* arr = new char[n * n]; //single block of 2D array for cake input
    
    //for example, following input
    //    4
    //    .c.c
    //    ccc.
    //    .cc.
    //    ....
    //will be taken as:
    //    .c.cccc..cc.....
    //(as a single block)

    int answer = 0; 

    for (int i = 0; i < n; i++)
    {
        int counter = 0; //to note number of chocolates in a row/column

        for (int j = 0; j < n; j++)
        {
            int index = (4 * i) + j; // index of imaginary 2D array
            cin >> arr[index]; // take input
            if (arr[index] == 'c') 
                counter++; // increase counter if chocolate found
        }

        if (counter > 1) // no pair possible if counter <= 1
        {
            int number_of_combinations = (factorial(counter) / (2 * (factorial(counter - 2))));
            answer += number_of_combinations; //this is done for each row
        }

    }


    // now doing the same thing for columns, just that the input has already been taken
    for (int j = 0; j < n; j++)
    {
        int counter = 0; //to note number of chocolates in a row/column
        for (int i = 0; i < n; i++)
        {
            if (arr[(4 * i) + j] == 'c')
                counter++; // increase counter if chocolate found
        }
        if (counter > 1) // no pair possible if counter <= 1
        {
            int number_of_combinations = (factorial(counter) / (2 * (factorial(counter - 2))));
            answer += number_of_combinations; //this is done for each column
        }
    }

    cout << answer;

}
